var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { Platform, TextInput } from 'ionic-angular';
var InputMaskComponent = (function () {
    function InputMaskComponent(_elementRef, _platform) {
        this._elementRef = _elementRef;
        this._platform = _platform;
        this._mask = '';
        this._maskCharacter = '_';
        this._maxLength = 0;
        this._value = '';
    }
    InputMaskComponent.prototype.ngOnInit = function () {
        if (!!this.rawMask && this.rawMask.length > 0) {
            this._mask = this.rawMask;
            if (!!this.rawMaskCharacter && this.rawMaskCharacter.length === 1) {
                this._maskCharacter = this.rawMaskCharacter;
            }
            this._maxLength = this._mask.split(this._maskCharacter).length - 1;
            if (!!this.rawPattern && this.rawPattern.length > 0) {
                this._pattern = new RegExp("[^" + this.rawPattern + "]", 'g');
            }
        }
        if (this._platform.is('ios')) {
            this.carret.nativeElement.classList.add('ios');
        }
        this.renderValue();
    };
    InputMaskComponent.prototype.ngAfterViewInit = function () {
        if (!!this.rawType) {
            this._elementRef.nativeElement.removeAttribute('type');
        }
        if (!!this.rawTabindex) {
            this._elementRef.nativeElement.removeAttribute('tabindex');
        }
    };
    InputMaskComponent.prototype.renderValue = function () {
        var splittedMask = this._mask.split(this._maskCharacter);
        var blockCount = splittedMask.length - 1;
        var text = splittedMask[0];
        var lastPosition = splittedMask[0].length;
        for (var i = 0; i < blockCount; ++i) {
            text += (this._value.length > i ?
                this._value[i] : "<span class=\"input-mask-empty\">" + this._maskCharacter + "</span>")
                + splittedMask[i + 1];
            lastPosition += this._value.length > i ? 1 + (i < blockCount - 1 ? splittedMask[i + 1].length : 0) : 0;
        }
        this.textHolder.nativeElement.innerHTML = text;
        this.carret.nativeElement.classList.add(this.input.isFocus() ? 'blink' : 'no-blink');
        this.carret.nativeElement.classList.remove(this.input.isFocus() ? 'no-blink' : 'blink');
        this.carret.nativeElement.style.left = (lastPosition * 1.1 + 0.6).toString() + 'ch';
    };
    InputMaskComponent.prototype.updateValue = function (event) {
        var value = this.input.value;
        if (!!value) {
            if (!!this._pattern) {
                value = value.replace(this._pattern, '');
            }
            if (value.length > this._maxLength) {
                value = value.substring(0, this._maxLength);
            }
        }
        else {
            value = '';
        }
        this._value = value;
        if (this.input.value !== value) {
            this.input.setValue(value);
        }
        this.renderValue();
    };
    Object.defineProperty(InputMaskComponent.prototype, "value", {
        get: function () {
            return this.input.value;
        },
        set: function (value) {
            this.input.setValue(value);
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        ViewChild(TextInput),
        __metadata("design:type", TextInput)
    ], InputMaskComponent.prototype, "input", void 0);
    __decorate([
        ViewChild('carret'),
        __metadata("design:type", ElementRef)
    ], InputMaskComponent.prototype, "carret", void 0);
    __decorate([
        ViewChild('textHolder'),
        __metadata("design:type", ElementRef)
    ], InputMaskComponent.prototype, "textHolder", void 0);
    __decorate([
        Input('allowedChars'),
        __metadata("design:type", String)
    ], InputMaskComponent.prototype, "rawPattern", void 0);
    __decorate([
        Input('mask'),
        __metadata("design:type", String)
    ], InputMaskComponent.prototype, "rawMask", void 0);
    __decorate([
        Input('maskCharacter'),
        __metadata("design:type", String)
    ], InputMaskComponent.prototype, "rawMaskCharacter", void 0);
    __decorate([
        Input('tabindex'),
        __metadata("design:type", String)
    ], InputMaskComponent.prototype, "rawTabindex", void 0);
    __decorate([
        Input('type'),
        __metadata("design:type", String)
    ], InputMaskComponent.prototype, "rawType", void 0);
    InputMaskComponent = __decorate([
        Component({
            selector: 'input-mask',
            template: '<div class="input-mask-text-holder">'
                + '<div #textHolder></div>'
                + '<div #carret class="input-mask-carret">'
                + '<span>|</span>'
                + '</div>'
                + '</div>'
                + '<ion-input'
                + ' (ionFocus)="renderValue()"'
                + ' (ionBlur)="renderValue()"'
                + ' (input)="updateValue($event)"'
                + ' tabindex="{{rawTabindex}}"'
                + ' type="{{rawType}}">'
                + '</ion-input>'
        }),
        __metadata("design:paramtypes", [ElementRef,
            Platform])
    ], InputMaskComponent);
    return InputMaskComponent;
}());
export { InputMaskComponent };
//# sourceMappingURL=input-mask.component.js.map