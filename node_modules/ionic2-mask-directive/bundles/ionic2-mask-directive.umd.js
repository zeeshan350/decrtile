(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/forms'], factory) :
	(factory((global['ionic2-mask-directive'] = {}),global.ng.core,global.ng.forms));
}(this, (function (exports,core,forms) { 'use strict';

var Ionic2MaskDirective = /** @class */ (function () {
    /**
     * @param {?} control
     */
    function Ionic2MaskDirective(control) {
        this.control = control;
    }
    /**
     * @return {?}
     */
    Ionic2MaskDirective.prototype.ngOnChanges = function () {
        var /** @type {?} */ value = this.control.control.value;
        if (value) {
            this.control.control.setValue(this.format(value));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    Ionic2MaskDirective.prototype.onKeyUp = function ($event) {
        if ($event.keyCode !== 13 && $event.keyCode !== 9) {
            var /** @type {?} */ value = this.control.control.value;
            this.control.control.setValue(this.format(value));
        }
    };
    /**
     * @param {?} v
     * @return {?}
     */
    Ionic2MaskDirective.prototype.format = function (v) {
        var /** @type {?} */ s = '';
        var /** @type {?} */ matches = v.match(/[a-zA-Z0-9]+/g);
        if (matches !== null) {
            var /** @type {?} */ value = matches.join('').split('');
            var /** @type {?} */ chars = this.mask.split('');
            for (var _i = 0, chars_1 = chars; _i < chars_1.length; _i++) {
                var c = chars_1[_i];
                if (value.length === 0) {
                    break;
                }
                switch (c) {
                    case '#':
                        s += value[0];
                        value = value.slice(1);
                        break;
                    case '9':
                        if (value[0].match(/\d/) !== null) {
                            s += value[0];
                            value = value.slice(1);
                        }
                        break;
                    case 'A':
                        if (value[0].match(/[a-zA-Z]/) !== null) {
                            s += value[0];
                            value = value.slice(1);
                        }
                        break;
                    default:
                        s += c;
                }
            }
        }
        return s;
    };
    return Ionic2MaskDirective;
}());
Ionic2MaskDirective.decorators = [
    { type: core.Directive, args: [{
                selector: '[mask]'
            },] },
];
/**
 * @nocollapse
 */
Ionic2MaskDirective.ctorParameters = function () { return [
    { type: forms.NgControl, },
]; };
Ionic2MaskDirective.propDecorators = {
    'mask': [{ type: core.Input },],
    'ngOnChanges': [{ type: core.HostListener, args: ['change',] },],
    'onKeyUp': [{ type: core.HostListener, args: ['keyup', ['$event'],] },],
};

exports.Ionic2MaskDirective = Ionic2MaskDirective;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ionic2-mask-directive.umd.js.map
