/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @record
 */
function IState() { }
if (false) {
    /** @type {?} */
    IState.prototype.id;
    /** @type {?} */
    IState.prototype.show;
    /** @type {?|undefined} */
    IState.prototype.subject;
}
var ShowHideService = /** @class */ (function () {
    function ShowHideService() {
        this.states = [];
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    ShowHideService.prototype.getIO = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var io = this.states.find(function (o) { return o.id === id; });
        if (!io && id) {
            io = this.init(id);
        }
        return io;
    };
    /**
     * @private
     * @param {?} id
     * @param {?=} show
     * @return {?}
     */
    ShowHideService.prototype.init = /**
     * @private
     * @param {?} id
     * @param {?=} show
     * @return {?}
     */
    function (id, show) {
        if (show === void 0) { show = false; }
        /** @type {?} */
        var subject = new ReplaySubject(1);
        /** @type {?} */
        var io = {
            id: id,
            show: show,
            subject: subject
        };
        this.states.push(io);
        return io;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ShowHideService.prototype.getObservable = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.getIO(id).subject;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ShowHideService.prototype.getShow = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.getIO(id).show;
    };
    /**
     * @param {?} id
     * @param {?} show
     * @return {?}
     */
    ShowHideService.prototype.setShow = /**
     * @param {?} id
     * @param {?} show
     * @return {?}
     */
    function (id, show) {
        /** @type {?} */
        var io = this.getIO(id);
        io.show = show;
        io.subject.next(io.show);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ShowHideService.prototype.toggle = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var io = this.getIO(id);
        io.show = !io.show;
        io.subject.next(io.show);
    };
    ShowHideService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ShowHideService.ctorParameters = function () { return []; };
    /** @nocollapse */ ShowHideService.ngInjectableDef = i0.defineInjectable({ factory: function ShowHideService_Factory() { return new ShowHideService(); }, token: ShowHideService, providedIn: "root" });
    return ShowHideService;
}());
export { ShowHideService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHideService.prototype.states;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2hvdy1oaWRlLXBhc3N3b3JkLyIsInNvdXJjZXMiOlsibGliL3Nob3ctaGlkZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBdUIsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7OztBQUUxRCxxQkFJQzs7O0lBSEMsb0JBQVc7O0lBQ1gsc0JBQWM7O0lBQ2QseUJBQTJCOztBQUc3QjtJQU1FO1FBRmlCLFdBQU0sR0FBRyxFQUFFLENBQUM7SUFFZCxDQUFDOzs7Ozs7SUFFUiwrQkFBSzs7Ozs7SUFBYixVQUFjLEVBQVU7O1lBQ2xCLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFYLENBQVcsQ0FBQztRQUMzQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUNiLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOzs7Ozs7O0lBRU8sOEJBQUk7Ozs7OztJQUFaLFVBQWEsRUFBVSxFQUFFLElBQXFCO1FBQXJCLHFCQUFBLEVBQUEsWUFBcUI7O1lBQ3RDLE9BQU8sR0FBRyxJQUFJLGFBQWEsQ0FBVSxDQUFDLENBQUM7O1lBQ3ZDLEVBQUUsR0FBRztZQUNULEVBQUUsSUFBQTtZQUNGLElBQUksTUFBQTtZQUNKLE9BQU8sU0FBQTtTQUNSO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOzs7OztJQUVNLHVDQUFhOzs7O0lBQXBCLFVBQXFCLEVBQVU7UUFDN0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUNoQyxDQUFDOzs7OztJQUVNLGlDQUFPOzs7O0lBQWQsVUFBZSxFQUFVO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDN0IsQ0FBQzs7Ozs7O0lBRU0saUNBQU87Ozs7O0lBQWQsVUFBZSxFQUFVLEVBQUUsSUFBYTs7WUFDaEMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3pCLEVBQUUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2YsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBRU0sZ0NBQU07Ozs7SUFBYixVQUFjLEVBQVU7O1lBQ2hCLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUN6QixFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztRQUNuQixFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7Z0JBN0NGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7OzBCQVhEO0NBdURDLEFBOUNELElBOENDO1NBM0NZLGVBQWU7Ozs7OztJQUMxQixpQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICBpZDogc3RyaW5nO1xuICBzaG93OiBib29sZWFuO1xuICBzdWJqZWN0PzogU3ViamVjdDxib29sZWFuPjtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgU2hvd0hpZGVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBzdGF0ZXMgPSBbXTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgcHJpdmF0ZSBnZXRJTyhpZDogc3RyaW5nKTogSVN0YXRlIHtcbiAgICBsZXQgaW8gPSB0aGlzLnN0YXRlcy5maW5kKG8gPT4gby5pZCA9PT0gaWQpO1xuICAgIGlmICghaW8gJiYgaWQpIHtcbiAgICAgIGlvID0gdGhpcy5pbml0KGlkKTtcbiAgICB9XG4gICAgcmV0dXJuIGlvO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0KGlkOiBzdHJpbmcsIHNob3c6IGJvb2xlYW4gPSBmYWxzZSk6IElTdGF0ZSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+KDEpO1xuICAgIGNvbnN0IGlvID0ge1xuICAgICAgaWQsXG4gICAgICBzaG93LFxuICAgICAgc3ViamVjdFxuICAgIH07XG4gICAgdGhpcy5zdGF0ZXMucHVzaChpbyk7XG4gICAgcmV0dXJuIGlvO1xuICB9XG5cbiAgcHVibGljIGdldE9ic2VydmFibGUoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmdldElPKGlkKS5zdWJqZWN0O1xuICB9XG5cbiAgcHVibGljIGdldFNob3coaWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmdldElPKGlkKS5zaG93O1xuICB9XG5cbiAgcHVibGljIHNldFNob3coaWQ6IHN0cmluZywgc2hvdzogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IGlvID0gdGhpcy5nZXRJTyhpZCk7XG4gICAgaW8uc2hvdyA9IHNob3c7XG4gICAgaW8uc3ViamVjdC5uZXh0KGlvLnNob3cpO1xuICB9XG5cbiAgcHVibGljIHRvZ2dsZShpZDogc3RyaW5nKSB7XG4gICAgY29uc3QgaW8gPSB0aGlzLmdldElPKGlkKTtcbiAgICBpby5zaG93ID0gIWlvLnNob3c7XG4gICAgaW8uc3ViamVjdC5uZXh0KGlvLnNob3cpO1xuICB9XG59XG4iXX0=