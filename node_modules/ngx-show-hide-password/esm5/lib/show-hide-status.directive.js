/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Renderer2, Input } from '@angular/core';
import { ShowHideService } from './show-hide.service';
/**
 * @record
 */
export function ShowHideStatusConfig() { }
if (false) {
    /** @type {?} */
    ShowHideStatusConfig.prototype.id;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.show;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.hide;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.materialIcon;
}
var ShowHideStatusDirective = /** @class */ (function () {
    function ShowHideStatusDirective(service, el, renderer) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ShowHideStatusDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var defaultConfig = {
            show: 'visibility',
            hide: 'visibility_off',
            materialIcon: false
        };
        this.config = tslib_1.__assign({}, defaultConfig, this.showHideStatus);
        if (!this.config.id) {
            throw new Error("No input id found. Please read the docs!");
        }
        this.subscription = this.service.getObservable(this.config.id).subscribe(function (show) { return _this.updateStatus(show); });
    };
    /**
     * @private
     * @param {?} show
     * @return {?}
     */
    ShowHideStatusDirective.prototype.updateStatus = /**
     * @private
     * @param {?} show
     * @return {?}
     */
    function (show) {
        if (this.config.materialIcon) {
            this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
        }
        else {
            this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);
            this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);
        }
    };
    /**
     * @return {?}
     */
    ShowHideStatusDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ShowHideStatusDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[showHideStatus]'
                },] }
    ];
    /** @nocollapse */
    ShowHideStatusDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    ShowHideStatusDirective.propDecorators = {
        showHideStatus: [{ type: Input }]
    };
    return ShowHideStatusDirective;
}());
export { ShowHideStatusDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.config;
    /** @type {?} */
    ShowHideStatusDirective.prototype.showHideStatus;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLXN0YXR1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2hvdy1oaWRlLXBhc3N3b3JkLyIsInNvdXJjZXMiOlsibGliL3Nob3ctaGlkZS1zdGF0dXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFhLEtBQUssRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7O0FBR3RELDBDQUtDOzs7SUFKQyxrQ0FBVzs7SUFDWCxvQ0FBYzs7SUFDZCxvQ0FBYzs7SUFDZCw0Q0FBdUI7O0FBR3pCO0lBU0UsaUNBQW9CLE9BQXdCLEVBQVUsRUFBYyxFQUFVLFFBQW1CO1FBQTdFLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7SUFBRyxDQUFDOzs7O0lBRXJHLGlEQUFlOzs7SUFBZjtRQUFBLGlCQWNDOztZQWJPLGFBQWEsR0FBRztZQUNwQixJQUFJLEVBQUUsWUFBWTtZQUNsQixJQUFJLEVBQUUsZ0JBQWdCO1lBQ3RCLFlBQVksRUFBRSxLQUFLO1NBQ3BCO1FBQ0QsSUFBSSxDQUFDLE1BQU0sd0JBQ04sYUFBYSxFQUNiLElBQUksQ0FBQyxjQUFjLENBQ3ZCLENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1NBQzdEO1FBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQXZCLENBQXVCLENBQUMsQ0FBQztJQUM1RyxDQUFDOzs7Ozs7SUFFTyw4Q0FBWTs7Ozs7SUFBcEIsVUFBcUIsSUFBYTtRQUNoQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFO1lBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNHO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzRjtJQUNILENBQUM7Ozs7SUFFRCw2Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7O2dCQXhDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtpQkFDN0I7Ozs7Z0JBWlEsZUFBZTtnQkFESixVQUFVO2dCQUFFLFNBQVM7OztpQ0FrQnRDLEtBQUs7O0lBa0NSLDhCQUFDO0NBQUEsQUF6Q0QsSUF5Q0M7U0F0Q1ksdUJBQXVCOzs7Ozs7SUFDbEMsK0NBQW1DOzs7OztJQUNuQyx5Q0FBcUM7O0lBRXJDLGlEQUErQzs7Ozs7SUFFbkMsMENBQWdDOzs7OztJQUFFLHFDQUFzQjs7Ozs7SUFBRSwyQ0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgT25EZXN0cm95LCBJbnB1dCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2hvd0hpZGVTZXJ2aWNlIH0gZnJvbSAnLi9zaG93LWhpZGUuc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBTaG93SGlkZVN0YXR1c0NvbmZpZyB7XG4gIGlkOiBzdHJpbmc7XG4gIHNob3c/OiBzdHJpbmc7XG4gIGhpZGU/OiBzdHJpbmc7XG4gIG1hdGVyaWFsSWNvbj86IGJvb2xlYW47XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzaG93SGlkZVN0YXR1c10nXG59KVxuZXhwb3J0IGNsYXNzIFNob3dIaWRlU3RhdHVzRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBjb25maWc6IFNob3dIaWRlU3RhdHVzQ29uZmlnO1xuXG4gIEBJbnB1dCgpIHNob3dIaWRlU3RhdHVzPzogU2hvd0hpZGVTdGF0dXNDb25maWc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzZXJ2aWNlOiBTaG93SGlkZVNlcnZpY2UsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgY29uc3QgZGVmYXVsdENvbmZpZyA9IHtcbiAgICAgIHNob3c6ICd2aXNpYmlsaXR5JyxcbiAgICAgIGhpZGU6ICd2aXNpYmlsaXR5X29mZicsXG4gICAgICBtYXRlcmlhbEljb246IGZhbHNlXG4gICAgfTtcbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIC4uLmRlZmF1bHRDb25maWcsXG4gICAgICAuLi50aGlzLnNob3dIaWRlU3RhdHVzXG4gICAgfTtcbiAgICBpZiAoIXRoaXMuY29uZmlnLmlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGlucHV0IGlkIGZvdW5kLiBQbGVhc2UgcmVhZCB0aGUgZG9jcyFgKTtcbiAgICB9XG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLnNlcnZpY2UuZ2V0T2JzZXJ2YWJsZSh0aGlzLmNvbmZpZy5pZCkuc3Vic2NyaWJlKHNob3cgPT4gdGhpcy51cGRhdGVTdGF0dXMoc2hvdykpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVTdGF0dXMoc2hvdzogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLmNvbmZpZy5tYXRlcmlhbEljb24pIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnaW5uZXJIVE1MJywgc2hvdyA/IHRoaXMuY29uZmlnLmhpZGUgOiB0aGlzLmNvbmZpZy5zaG93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICFzaG93ID8gdGhpcy5jb25maWcuaGlkZSA6IHRoaXMuY29uZmlnLnNob3cpO1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHNob3cgPyB0aGlzLmNvbmZpZy5oaWRlIDogdGhpcy5jb25maWcuc2hvdyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19