/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2 } from '@angular/core';
import { ShowHideService } from './show-hide.service';
var ShowHideInputDirective = /** @class */ (function () {
    function ShowHideInputDirective(service, el, renderer) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.id = this.el.nativeElement.getAttribute('id');
        if (!this.id) {
            throw new Error("No input id found. Please read the docs!");
        }
        this.service.setShow(this.id, this.el.nativeElement.type !== 'password');
    }
    /**
     * @return {?}
     */
    ShowHideInputDirective.prototype.getShown = /**
     * @return {?}
     */
    function () {
        return this.service.getShow(this.id);
    };
    /**
     * @return {?}
     */
    ShowHideInputDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscription = this.service
            .getObservable(this.id)
            .subscribe(function (show) { return _this.renderer.setAttribute(_this.el.nativeElement, 'type', show ? 'text' : 'password'); });
    };
    /**
     * @return {?}
     */
    ShowHideInputDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ShowHideInputDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[showHideInput]'
                },] }
    ];
    /** @nocollapse */
    ShowHideInputDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    return ShowHideInputDirective;
}());
export { ShowHideInputDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.id;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLWlucHV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zaG93LWhpZGUtcGFzc3dvcmQvIiwic291cmNlcyI6WyJsaWIvc2hvdy1oaWRlLWlucHV0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUNwRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHdEQ7SUFPRSxnQ0FBb0IsT0FBd0IsRUFBVSxFQUFjLEVBQVUsUUFBbUI7UUFBN0UsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUMvRixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztTQUM3RDtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDO0lBQzNFLENBQUM7Ozs7SUFFTSx5Q0FBUTs7O0lBQWY7UUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QyxDQUFDOzs7O0lBRUQseUNBQVE7OztJQUFSO1FBQUEsaUJBSUM7UUFIQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPO2FBQzdCLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2FBQ3RCLFNBQVMsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQXJGLENBQXFGLENBQUMsQ0FBQztJQUM5RyxDQUFDOzs7O0lBRUQsNENBQVc7OztJQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDOztnQkE3QkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxzQkFBc0I7aUJBQ2pDOzs7O2dCQUxRLGVBQWU7Z0JBREosVUFBVTtnQkFBRSxTQUFTOztJQWtDekMsNkJBQUM7Q0FBQSxBQTlCRCxJQThCQztTQTNCWSxzQkFBc0I7Ozs7OztJQUNqQyw4Q0FBbUM7Ozs7O0lBQ25DLG9DQUFtQjs7Ozs7SUFFUCx5Q0FBZ0M7Ozs7O0lBQUUsb0NBQXNCOzs7OztJQUFFLDBDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2hvd0hpZGVTZXJ2aWNlIH0gZnJvbSAnLi9zaG93LWhpZGUuc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnaW5wdXRbc2hvd0hpZGVJbnB1dF0nXG59KVxuZXhwb3J0IGNsYXNzIFNob3dIaWRlSW5wdXREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgaWQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNlcnZpY2U6IFNob3dIaWRlU2VydmljZSwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgdGhpcy5pZCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgaWYgKCF0aGlzLmlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGlucHV0IGlkIGZvdW5kLiBQbGVhc2UgcmVhZCB0aGUgZG9jcyFgKTtcbiAgICB9XG4gICAgdGhpcy5zZXJ2aWNlLnNldFNob3codGhpcy5pZCwgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnR5cGUgIT09ICdwYXNzd29yZCcpO1xuICB9XG5cbiAgcHVibGljIGdldFNob3duKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnNlcnZpY2UuZ2V0U2hvdyh0aGlzLmlkKTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5zZXJ2aWNlXG4gICAgICAuZ2V0T2JzZXJ2YWJsZSh0aGlzLmlkKVxuICAgICAgLnN1YnNjcmliZShzaG93ID0+IHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3R5cGUnLCBzaG93ID8gJ3RleHQnIDogJ3Bhc3N3b3JkJykpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19