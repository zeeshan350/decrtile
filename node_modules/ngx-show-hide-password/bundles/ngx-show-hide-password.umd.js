(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@fortawesome/free-solid-svg-icons'), require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@fortawesome/angular-fontawesome')) :
    typeof define === 'function' && define.amd ? define('ngx-show-hide-password', ['exports', 'rxjs', '@fortawesome/free-solid-svg-icons', '@angular/core', '@angular/common', '@angular/forms', '@fortawesome/angular-fontawesome'], factory) :
    (factory((global['ngx-show-hide-password'] = {}),global.rxjs,global.freeSolidSvgIcons,global.ng.core,global.ng.common,global.ng.forms,global.angularFontawesome));
}(this, (function (exports,rxjs,freeSolidSvgIcons,i0,common,forms,angularFontawesome) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShowHideService = /** @class */ (function () {
        function ShowHideService() {
            this.states = [];
        }
        /**
         * @private
         * @param {?} id
         * @return {?}
         */
        ShowHideService.prototype.getIO = /**
         * @private
         * @param {?} id
         * @return {?}
         */
            function (id) {
                /** @type {?} */
                var io = this.states.find(function (o) { return o.id === id; });
                if (!io && id) {
                    io = this.init(id);
                }
                return io;
            };
        /**
         * @private
         * @param {?} id
         * @param {?=} show
         * @return {?}
         */
        ShowHideService.prototype.init = /**
         * @private
         * @param {?} id
         * @param {?=} show
         * @return {?}
         */
            function (id, show) {
                if (show === void 0) {
                    show = false;
                }
                /** @type {?} */
                var subject = new rxjs.ReplaySubject(1);
                /** @type {?} */
                var io = {
                    id: id,
                    show: show,
                    subject: subject
                };
                this.states.push(io);
                return io;
            };
        /**
         * @param {?} id
         * @return {?}
         */
        ShowHideService.prototype.getObservable = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.getIO(id).subject;
            };
        /**
         * @param {?} id
         * @return {?}
         */
        ShowHideService.prototype.getShow = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.getIO(id).show;
            };
        /**
         * @param {?} id
         * @param {?} show
         * @return {?}
         */
        ShowHideService.prototype.setShow = /**
         * @param {?} id
         * @param {?} show
         * @return {?}
         */
            function (id, show) {
                /** @type {?} */
                var io = this.getIO(id);
                io.show = show;
                io.subject.next(io.show);
            };
        /**
         * @param {?} id
         * @return {?}
         */
        ShowHideService.prototype.toggle = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                /** @type {?} */
                var io = this.getIO(id);
                io.show = !io.show;
                io.subject.next(io.show);
            };
        ShowHideService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ShowHideService.ctorParameters = function () { return []; };
        /** @nocollapse */ ShowHideService.ngInjectableDef = i0.defineInjectable({ factory: function ShowHideService_Factory() { return new ShowHideService(); }, token: ShowHideService, providedIn: "root" });
        return ShowHideService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShowHideTriggerDirective = /** @class */ (function () {
        function ShowHideTriggerDirective(service) {
            this.service = service;
        }
        /**
         * @return {?}
         */
        ShowHideTriggerDirective.prototype.onClick = /**
         * @return {?}
         */
            function () {
                if (!this.showHideTrigger) {
                    throw new Error("No input id found. Please read the docs!");
                }
                this.service.toggle(this.showHideTrigger);
            };
        ShowHideTriggerDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[showHideTrigger]'
                    },] }
        ];
        /** @nocollapse */
        ShowHideTriggerDirective.ctorParameters = function () {
            return [
                { type: ShowHideService }
            ];
        };
        ShowHideTriggerDirective.propDecorators = {
            showHideTrigger: [{ type: i0.Input }],
            onClick: [{ type: i0.HostListener, args: ['click',] }]
        };
        return ShowHideTriggerDirective;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShowHideStatusDirective = /** @class */ (function () {
        function ShowHideStatusDirective(service, el, renderer) {
            this.service = service;
            this.el = el;
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        ShowHideStatusDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var defaultConfig = {
                    show: 'visibility',
                    hide: 'visibility_off',
                    materialIcon: false
                };
                this.config = __assign({}, defaultConfig, this.showHideStatus);
                if (!this.config.id) {
                    throw new Error("No input id found. Please read the docs!");
                }
                this.subscription = this.service.getObservable(this.config.id).subscribe(function (show) { return _this.updateStatus(show); });
            };
        /**
         * @private
         * @param {?} show
         * @return {?}
         */
        ShowHideStatusDirective.prototype.updateStatus = /**
         * @private
         * @param {?} show
         * @return {?}
         */
            function (show) {
                if (this.config.materialIcon) {
                    this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
                }
                else {
                    this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);
                    this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);
                }
            };
        /**
         * @return {?}
         */
        ShowHideStatusDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.subscription) {
                    this.subscription.unsubscribe();
                }
            };
        ShowHideStatusDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[showHideStatus]'
                    },] }
        ];
        /** @nocollapse */
        ShowHideStatusDirective.ctorParameters = function () {
            return [
                { type: ShowHideService },
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        ShowHideStatusDirective.propDecorators = {
            showHideStatus: [{ type: i0.Input }]
        };
        return ShowHideStatusDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShowHideInputDirective = /** @class */ (function () {
        function ShowHideInputDirective(service, el, renderer) {
            this.service = service;
            this.el = el;
            this.renderer = renderer;
            this.id = this.el.nativeElement.getAttribute('id');
            if (!this.id) {
                throw new Error("No input id found. Please read the docs!");
            }
            this.service.setShow(this.id, this.el.nativeElement.type !== 'password');
        }
        /**
         * @return {?}
         */
        ShowHideInputDirective.prototype.getShown = /**
         * @return {?}
         */
            function () {
                return this.service.getShow(this.id);
            };
        /**
         * @return {?}
         */
        ShowHideInputDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.subscription = this.service
                    .getObservable(this.id)
                    .subscribe(function (show) { return _this.renderer.setAttribute(_this.el.nativeElement, 'type', show ? 'text' : 'password'); });
            };
        /**
         * @return {?}
         */
        ShowHideInputDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.subscription) {
                    this.subscription.unsubscribe();
                }
            };
        ShowHideInputDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: 'input[showHideInput]'
                    },] }
        ];
        /** @nocollapse */
        ShowHideInputDirective.ctorParameters = function () {
            return [
                { type: ShowHideService },
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        return ShowHideInputDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Add a split input button to password or text input. Toggles input type between "text" and "password".
     *
     * \@example
     * <show-hide-password size="sm|lg">
     * <input type="password" name=... />
     * </show-hide-password>
     */
    var ShowHidePasswordComponent = /** @class */ (function () {
        function ShowHidePasswordComponent(service, elem, renderer) {
            this.service = service;
            this.elem = elem;
            this.renderer = renderer;
            this.btnStyle = 'secondary';
            this.btnOutline = true;
            this.faEye = freeSolidSvgIcons.faEye;
            this.faEyeSlash = freeSolidSvgIcons.faEyeSlash;
        }
        /**
         * @return {?}
         */
        ShowHidePasswordComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.input = this.elem.nativeElement.querySelector('input');
                if (!this.input) {
                    throw new Error("No input element found. Please read the docs!");
                }
                this.id = this.input.getAttribute('id');
                if (!this.id) {
                    this.id = 'showHideInput' + Math.round(Math.random() * 100000);
                    this.renderer.setAttribute(this.input, 'id', this.id);
                }
                this.renderer.addClass(this.elem.nativeElement, 'input-group');
                if (this.size === 'sm') {
                    this.renderer.addClass(this.elem.nativeElement, 'input-group-sm');
                }
                else if (this.size === 'lg') {
                    this.renderer.addClass(this.elem.nativeElement, 'input-group-lg');
                }
                this.isHidden = this.input.type === 'password';
                this.renderer.addClass(this.input, 'form-control'); // just to be sure
                this.service.setShow(this.id, this.input.type !== 'password');
                this.subscription = this.service.getObservable(this.id).subscribe(function (show) {
                    _this.isHidden = !show;
                    _this.renderer.setAttribute(_this.input, 'type', show ? 'text' : 'password');
                });
            };
        /**
         * @return {?}
         */
        ShowHidePasswordComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.subscription) {
                    this.subscription.unsubscribe();
                }
            };
        ShowHidePasswordComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'show-hide-password',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        template: "\n  <ng-content></ng-content>\n  <div class=\"input-group-append ngx-show-hide-password\">\n    <button class=\"btn\" [ngClass]=\"(btnOutline ? 'btn-outline-' + btnStyle : 'btn-' + btnStyle)\"\n      type=\"button\" [showHideTrigger]=\"id\">\n      <fa-icon [fixedWidth]=\"true\" size=\"lg\" [icon]=\"(isHidden ? faEye : faEyeSlash)\"\n        [showHideStatus]=\"{id: id}\"></fa-icon>\n    </button>\n  </div>\n"
                    }] }
        ];
        /** @nocollapse */
        ShowHidePasswordComponent.ctorParameters = function () {
            return [
                { type: ShowHideService },
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        ShowHidePasswordComponent.propDecorators = {
            btnStyle: [{ type: i0.Input }],
            btnOutline: [{ type: i0.Input }],
            size: [{ type: i0.Input }]
        };
        return ShowHidePasswordComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShowHidePasswordModule = /** @class */ (function () {
        function ShowHidePasswordModule() {
        }
        ShowHidePasswordModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [common.CommonModule, forms.FormsModule, angularFontawesome.FontAwesomeModule],
                        exports: [ShowHidePasswordComponent, ShowHideTriggerDirective, ShowHideInputDirective, ShowHideStatusDirective],
                        declarations: [ShowHidePasswordComponent, ShowHideTriggerDirective, ShowHideInputDirective, ShowHideStatusDirective]
                    },] }
        ];
        return ShowHidePasswordModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ShowHideService = ShowHideService;
    exports.ShowHideTriggerDirective = ShowHideTriggerDirective;
    exports.ShowHideStatusDirective = ShowHideStatusDirective;
    exports.ShowHideInputDirective = ShowHideInputDirective;
    exports.ShowHidePasswordComponent = ShowHidePasswordComponent;
    exports.ShowHidePasswordModule = ShowHidePasswordModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-show-hide-password.umd.js.map