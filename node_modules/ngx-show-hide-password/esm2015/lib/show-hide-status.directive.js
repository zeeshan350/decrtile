/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input } from '@angular/core';
import { ShowHideService } from './show-hide.service';
/**
 * @record
 */
export function ShowHideStatusConfig() { }
if (false) {
    /** @type {?} */
    ShowHideStatusConfig.prototype.id;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.show;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.hide;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.materialIcon;
}
export class ShowHideStatusDirective {
    /**
     * @param {?} service
     * @param {?} el
     * @param {?} renderer
     */
    constructor(service, el, renderer) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const defaultConfig = {
            show: 'visibility',
            hide: 'visibility_off',
            materialIcon: false
        };
        this.config = Object.assign({}, defaultConfig, this.showHideStatus);
        if (!this.config.id) {
            throw new Error(`No input id found. Please read the docs!`);
        }
        this.subscription = this.service.getObservable(this.config.id).subscribe(show => this.updateStatus(show));
    }
    /**
     * @private
     * @param {?} show
     * @return {?}
     */
    updateStatus(show) {
        if (this.config.materialIcon) {
            this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
        }
        else {
            this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);
            this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHideStatusDirective.decorators = [
    { type: Directive, args: [{
                selector: '[showHideStatus]'
            },] }
];
/** @nocollapse */
ShowHideStatusDirective.ctorParameters = () => [
    { type: ShowHideService },
    { type: ElementRef },
    { type: Renderer2 }
];
ShowHideStatusDirective.propDecorators = {
    showHideStatus: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.config;
    /** @type {?} */
    ShowHideStatusDirective.prototype.showHideStatus;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLXN0YXR1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2hvdy1oaWRlLXBhc3N3b3JkLyIsInNvdXJjZXMiOlsibGliL3Nob3ctaGlkZS1zdGF0dXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQWEsS0FBSyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7QUFHdEQsMENBS0M7OztJQUpDLGtDQUFXOztJQUNYLG9DQUFjOztJQUNkLG9DQUFjOztJQUNkLDRDQUF1Qjs7QUFNekIsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7O0lBTWxDLFlBQW9CLE9BQXdCLEVBQVUsRUFBYyxFQUFVLFFBQW1CO1FBQTdFLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7SUFBRyxDQUFDOzs7O0lBRXJHLGVBQWU7O2NBQ1AsYUFBYSxHQUFHO1lBQ3BCLElBQUksRUFBRSxZQUFZO1lBQ2xCLElBQUksRUFBRSxnQkFBZ0I7WUFDdEIsWUFBWSxFQUFFLEtBQUs7U0FDcEI7UUFDRCxJQUFJLENBQUMsTUFBTSxxQkFDTixhQUFhLEVBQ2IsSUFBSSxDQUFDLGNBQWMsQ0FDdkIsQ0FBQztRQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtZQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7U0FDN0Q7UUFDRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVHLENBQUM7Ozs7OztJQUVPLFlBQVksQ0FBQyxJQUFhO1FBQ2hDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUU7WUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0c7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5RixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNGO0lBQ0gsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7OztZQXhDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjthQUM3Qjs7OztZQVpRLGVBQWU7WUFESixVQUFVO1lBQUUsU0FBUzs7OzZCQWtCdEMsS0FBSzs7Ozs7OztJQUhOLCtDQUFtQzs7Ozs7SUFDbkMseUNBQXFDOztJQUVyQyxpREFBK0M7Ozs7O0lBRW5DLDBDQUFnQzs7Ozs7SUFBRSxxQ0FBc0I7Ozs7O0lBQUUsMkNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIE9uRGVzdHJveSwgSW5wdXQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNob3dIaWRlU2VydmljZSB9IGZyb20gJy4vc2hvdy1oaWRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2hvd0hpZGVTdGF0dXNDb25maWcge1xuICBpZDogc3RyaW5nO1xuICBzaG93Pzogc3RyaW5nO1xuICBoaWRlPzogc3RyaW5nO1xuICBtYXRlcmlhbEljb24/OiBib29sZWFuO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc2hvd0hpZGVTdGF0dXNdJ1xufSlcbmV4cG9ydCBjbGFzcyBTaG93SGlkZVN0YXR1c0RpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgY29uZmlnOiBTaG93SGlkZVN0YXR1c0NvbmZpZztcblxuICBASW5wdXQoKSBzaG93SGlkZVN0YXR1cz86IFNob3dIaWRlU3RhdHVzQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VydmljZTogU2hvd0hpZGVTZXJ2aWNlLCBwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIGNvbnN0IGRlZmF1bHRDb25maWcgPSB7XG4gICAgICBzaG93OiAndmlzaWJpbGl0eScsXG4gICAgICBoaWRlOiAndmlzaWJpbGl0eV9vZmYnLFxuICAgICAgbWF0ZXJpYWxJY29uOiBmYWxzZVxuICAgIH07XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAuLi5kZWZhdWx0Q29uZmlnLFxuICAgICAgLi4udGhpcy5zaG93SGlkZVN0YXR1c1xuICAgIH07XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5pZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBpbnB1dCBpZCBmb3VuZC4gUGxlYXNlIHJlYWQgdGhlIGRvY3MhYCk7XG4gICAgfVxuICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5zZXJ2aWNlLmdldE9ic2VydmFibGUodGhpcy5jb25maWcuaWQpLnN1YnNjcmliZShzaG93ID0+IHRoaXMudXBkYXRlU3RhdHVzKHNob3cpKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlU3RhdHVzKHNob3c6IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5jb25maWcubWF0ZXJpYWxJY29uKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2lubmVySFRNTCcsIHNob3cgPyB0aGlzLmNvbmZpZy5oaWRlIDogdGhpcy5jb25maWcuc2hvdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCAhc2hvdyA/IHRoaXMuY29uZmlnLmhpZGUgOiB0aGlzLmNvbmZpZy5zaG93KTtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBzaG93ID8gdGhpcy5jb25maWcuaGlkZSA6IHRoaXMuY29uZmlnLnNob3cpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==