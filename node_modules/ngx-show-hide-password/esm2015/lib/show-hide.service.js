/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @record
 */
function IState() { }
if (false) {
    /** @type {?} */
    IState.prototype.id;
    /** @type {?} */
    IState.prototype.show;
    /** @type {?|undefined} */
    IState.prototype.subject;
}
export class ShowHideService {
    constructor() {
        this.states = [];
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    getIO(id) {
        /** @type {?} */
        let io = this.states.find(o => o.id === id);
        if (!io && id) {
            io = this.init(id);
        }
        return io;
    }
    /**
     * @private
     * @param {?} id
     * @param {?=} show
     * @return {?}
     */
    init(id, show = false) {
        /** @type {?} */
        const subject = new ReplaySubject(1);
        /** @type {?} */
        const io = {
            id,
            show,
            subject
        };
        this.states.push(io);
        return io;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getObservable(id) {
        return this.getIO(id).subject;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getShow(id) {
        return this.getIO(id).show;
    }
    /**
     * @param {?} id
     * @param {?} show
     * @return {?}
     */
    setShow(id, show) {
        /** @type {?} */
        const io = this.getIO(id);
        io.show = show;
        io.subject.next(io.show);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    toggle(id) {
        /** @type {?} */
        const io = this.getIO(id);
        io.show = !io.show;
        io.subject.next(io.show);
    }
}
ShowHideService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ShowHideService.ctorParameters = () => [];
/** @nocollapse */ ShowHideService.ngInjectableDef = i0.defineInjectable({ factory: function ShowHideService_Factory() { return new ShowHideService(); }, token: ShowHideService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHideService.prototype.states;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2hvdy1oaWRlLXBhc3N3b3JkLyIsInNvdXJjZXMiOlsibGliL3Nob3ctaGlkZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBdUIsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7OztBQUUxRCxxQkFJQzs7O0lBSEMsb0JBQVc7O0lBQ1gsc0JBQWM7O0lBQ2QseUJBQTJCOztBQU03QixNQUFNLE9BQU8sZUFBZTtJQUcxQjtRQUZpQixXQUFNLEdBQUcsRUFBRSxDQUFDO0lBRWQsQ0FBQzs7Ozs7O0lBRVIsS0FBSyxDQUFDLEVBQVU7O1lBQ2xCLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQzNDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ2IsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDcEI7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7Ozs7Ozs7SUFFTyxJQUFJLENBQUMsRUFBVSxFQUFFLE9BQWdCLEtBQUs7O2NBQ3RDLE9BQU8sR0FBRyxJQUFJLGFBQWEsQ0FBVSxDQUFDLENBQUM7O2NBQ3ZDLEVBQUUsR0FBRztZQUNULEVBQUU7WUFDRixJQUFJO1lBQ0osT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOzs7OztJQUVNLGFBQWEsQ0FBQyxFQUFVO1FBQzdCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFFTSxPQUFPLENBQUMsRUFBVTtRQUN2QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzdCLENBQUM7Ozs7OztJQUVNLE9BQU8sQ0FBQyxFQUFVLEVBQUUsSUFBYTs7Y0FDaEMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3pCLEVBQUUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2YsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBRU0sTUFBTSxDQUFDLEVBQVU7O2NBQ2hCLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUN6QixFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztRQUNuQixFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7O1lBN0NGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs7Ozs7OztJQUVDLGlDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gIGlkOiBzdHJpbmc7XG4gIHNob3c6IGJvb2xlYW47XG4gIHN1YmplY3Q/OiBTdWJqZWN0PGJvb2xlYW4+O1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBTaG93SGlkZVNlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IHN0YXRlcyA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBwcml2YXRlIGdldElPKGlkOiBzdHJpbmcpOiBJU3RhdGUge1xuICAgIGxldCBpbyA9IHRoaXMuc3RhdGVzLmZpbmQobyA9PiBvLmlkID09PSBpZCk7XG4gICAgaWYgKCFpbyAmJiBpZCkge1xuICAgICAgaW8gPSB0aGlzLmluaXQoaWQpO1xuICAgIH1cbiAgICByZXR1cm4gaW87XG4gIH1cblxuICBwcml2YXRlIGluaXQoaWQ6IHN0cmluZywgc2hvdzogYm9vbGVhbiA9IGZhbHNlKTogSVN0YXRlIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4oMSk7XG4gICAgY29uc3QgaW8gPSB7XG4gICAgICBpZCxcbiAgICAgIHNob3csXG4gICAgICBzdWJqZWN0XG4gICAgfTtcbiAgICB0aGlzLnN0YXRlcy5wdXNoKGlvKTtcbiAgICByZXR1cm4gaW87XG4gIH1cblxuICBwdWJsaWMgZ2V0T2JzZXJ2YWJsZShpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SU8oaWQpLnN1YmplY3Q7XG4gIH1cblxuICBwdWJsaWMgZ2V0U2hvdyhpZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SU8oaWQpLnNob3c7XG4gIH1cblxuICBwdWJsaWMgc2V0U2hvdyhpZDogc3RyaW5nLCBzaG93OiBib29sZWFuKTogdm9pZCB7XG4gICAgY29uc3QgaW8gPSB0aGlzLmdldElPKGlkKTtcbiAgICBpby5zaG93ID0gc2hvdztcbiAgICBpby5zdWJqZWN0Lm5leHQoaW8uc2hvdyk7XG4gIH1cblxuICBwdWJsaWMgdG9nZ2xlKGlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBpbyA9IHRoaXMuZ2V0SU8oaWQpO1xuICAgIGlvLnNob3cgPSAhaW8uc2hvdztcbiAgICBpby5zdWJqZWN0Lm5leHQoaW8uc2hvdyk7XG4gIH1cbn1cbiJdfQ==