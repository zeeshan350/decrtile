/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, Renderer2, ChangeDetectionStrategy } from '@angular/core';
import { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';
import { ShowHideService } from './show-hide.service';
/**
 * Add a split input button to password or text input. Toggles input type between "text" and "password".
 *
 * \@example
 * <show-hide-password size="sm|lg">
 * <input type="password" name=... />
 * </show-hide-password>
 */
export class ShowHidePasswordComponent {
    /**
     * @param {?} service
     * @param {?} elem
     * @param {?} renderer
     */
    constructor(service, elem, renderer) {
        this.service = service;
        this.elem = elem;
        this.renderer = renderer;
        this.btnStyle = 'secondary';
        this.btnOutline = true;
        this.faEye = faEye;
        this.faEyeSlash = faEyeSlash;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.input = this.elem.nativeElement.querySelector('input');
        if (!this.input) {
            throw new Error(`No input element found. Please read the docs!`);
        }
        this.id = this.input.getAttribute('id');
        if (!this.id) {
            this.id = 'showHideInput' + Math.round(Math.random() * 100000);
            this.renderer.setAttribute(this.input, 'id', this.id);
        }
        this.renderer.addClass(this.elem.nativeElement, 'input-group');
        if (this.size === 'sm') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-sm');
        }
        else if (this.size === 'lg') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-lg');
        }
        this.isHidden = this.input.type === 'password';
        this.renderer.addClass(this.input, 'form-control'); // just to be sure
        this.service.setShow(this.id, this.input.type !== 'password');
        this.subscription = this.service.getObservable(this.id).subscribe(show => {
            this.isHidden = !show;
            this.renderer.setAttribute(this.input, 'type', show ? 'text' : 'password');
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHidePasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'show-hide-password',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
  <ng-content></ng-content>
  <div class="input-group-append ngx-show-hide-password">
    <button class="btn" [ngClass]="(btnOutline ? 'btn-outline-' + btnStyle : 'btn-' + btnStyle)"
      type="button" [showHideTrigger]="id">
      <fa-icon [fixedWidth]="true" size="lg" [icon]="(isHidden ? faEye : faEyeSlash)"
        [showHideStatus]="{id: id}"></fa-icon>
    </button>
  </div>
`
            }] }
];
/** @nocollapse */
ShowHidePasswordComponent.ctorParameters = () => [
    { type: ShowHideService },
    { type: ElementRef },
    { type: Renderer2 }
];
ShowHidePasswordComponent.propDecorators = {
    btnStyle: [{ type: Input }],
    btnOutline: [{ type: Input }],
    size: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.subscription;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.btnStyle;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.btnOutline;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.size;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.input;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.isHidden;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.id;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.faEye;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.faEyeSlash;
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.elem;
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLXBhc3N3b3JkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zaG93LWhpZGUtcGFzc3dvcmQvIiwic291cmNlcyI6WyJsaWIvc2hvdy1oaWRlLXBhc3N3b3JkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFVLFNBQVMsRUFBRSx1QkFBdUIsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUNwSCxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7Ozs7Ozs7O0FBeUJ0RCxNQUFNLE9BQU8seUJBQXlCOzs7Ozs7SUFxQnBDLFlBQW9CLE9BQXdCLEVBQVUsSUFBZ0IsRUFBVSxRQUFtQjtRQUEvRSxZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUFVLFNBQUksR0FBSixJQUFJLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBakI1RixhQUFRLEdBQXdFLFdBQVcsQ0FBQztRQUc1RixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBV3pCLFVBQUssR0FBRyxLQUFLLENBQUM7UUFDZCxlQUFVLEdBQUcsVUFBVSxDQUFDO0lBRThFLENBQUM7Ozs7SUFFdkcsUUFBUTtRQUNOLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1NBQ2xFO1FBQ0QsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNaLElBQUksQ0FBQyxFQUFFLEdBQUcsZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1lBQy9ELElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN2RDtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQy9ELElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztTQUNuRTthQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztTQUNuRTtRQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDO1FBQy9DLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxrQkFBa0I7UUFDdEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkUsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQztZQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0UsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQzs7O1lBbEVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFOzs7Ozs7Ozs7Q0FTWDthQUNBOzs7O1lBeEJRLGVBQWU7WUFGSixVQUFVO1lBQWlCLFNBQVM7Ozt1QkE4QnJELEtBQUs7eUJBR0wsS0FBSzttQkFHTCxLQUFLOzs7Ozs7O0lBUk4saURBQW1DOztJQUVuQyw2Q0FDbUc7O0lBRW5HLCtDQUN5Qjs7SUFFekIseUNBQzhCOztJQUU5QiwwQ0FBa0I7O0lBRWxCLDZDQUF5Qjs7SUFFekIsdUNBQWtCOztJQUVsQiwwQ0FBYzs7SUFDZCwrQ0FBd0I7Ozs7O0lBRVosNENBQWdDOzs7OztJQUFFLHlDQUF3Qjs7Ozs7SUFBRSw2Q0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkluaXQsIFJlbmRlcmVyMiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZmFFeWUsIGZhRXllU2xhc2ggfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMnO1xuaW1wb3J0IHsgU2hvd0hpZGVTZXJ2aWNlIH0gZnJvbSAnLi9zaG93LWhpZGUuc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBBZGQgYSBzcGxpdCBpbnB1dCBidXR0b24gdG8gcGFzc3dvcmQgb3IgdGV4dCBpbnB1dC4gVG9nZ2xlcyBpbnB1dCB0eXBlIGJldHdlZW4gXCJ0ZXh0XCIgYW5kIFwicGFzc3dvcmRcIi5cbiAqXG4gKiBAZXhhbXBsZVxuICogPHNob3ctaGlkZS1wYXNzd29yZCBzaXplPVwic218bGdcIj5cbiAqIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBuYW1lPS4uLiAvPlxuICogPC9zaG93LWhpZGUtcGFzc3dvcmQ+XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3Nob3ctaGlkZS1wYXNzd29yZCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogYFxuICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1hcHBlbmQgbmd4LXNob3ctaGlkZS1wYXNzd29yZFwiPlxuICAgIDxidXR0b24gY2xhc3M9XCJidG5cIiBbbmdDbGFzc109XCIoYnRuT3V0bGluZSA/ICdidG4tb3V0bGluZS0nICsgYnRuU3R5bGUgOiAnYnRuLScgKyBidG5TdHlsZSlcIlxuICAgICAgdHlwZT1cImJ1dHRvblwiIFtzaG93SGlkZVRyaWdnZXJdPVwiaWRcIj5cbiAgICAgIDxmYS1pY29uIFtmaXhlZFdpZHRoXT1cInRydWVcIiBzaXplPVwibGdcIiBbaWNvbl09XCIoaXNIaWRkZW4gPyBmYUV5ZSA6IGZhRXllU2xhc2gpXCJcbiAgICAgICAgW3Nob3dIaWRlU3RhdHVzXT1cIntpZDogaWR9XCI+PC9mYS1pY29uPlxuICAgIDwvYnV0dG9uPlxuICA8L2Rpdj5cbmBcbn0pXG5leHBvcnQgY2xhc3MgU2hvd0hpZGVQYXNzd29yZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgYnRuU3R5bGU6ICdwcmltYXJ5JyB8ICdzZWNvbmRhcnknIHwgJ3N1Y2Nlc3MnIHwgJ2RhbmdlcicgfCAnd2FybmluZycgfCAnaW5mbycgPSAnc2Vjb25kYXJ5JztcblxuICBASW5wdXQoKVxuICBwdWJsaWMgYnRuT3V0bGluZSA9IHRydWU7XG5cbiAgQElucHV0KClcbiAgcHVibGljIHNpemU6ICdzbScgfCAnbGcnIHwgJyc7XG5cbiAgcHVibGljIGlucHV0OiBhbnk7XG5cbiAgcHVibGljIGlzSGlkZGVuOiBib29sZWFuO1xuXG4gIHB1YmxpYyBpZDogc3RyaW5nO1xuXG4gIGZhRXllID0gZmFFeWU7XG4gIGZhRXllU2xhc2ggPSBmYUV5ZVNsYXNoO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VydmljZTogU2hvd0hpZGVTZXJ2aWNlLCBwcml2YXRlIGVsZW06IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmlucHV0ID0gdGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICBpZiAoIXRoaXMuaW5wdXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gaW5wdXQgZWxlbWVudCBmb3VuZC4gUGxlYXNlIHJlYWQgdGhlIGRvY3MhYCk7XG4gICAgfVxuICAgIHRoaXMuaWQgPSB0aGlzLmlucHV0LmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgIHRoaXMuaWQgPSAnc2hvd0hpZGVJbnB1dCcgKyBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDApO1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5pbnB1dCwgJ2lkJywgdGhpcy5pZCk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQsICdpbnB1dC1ncm91cCcpO1xuICAgIGlmICh0aGlzLnNpemUgPT09ICdzbScpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQsICdpbnB1dC1ncm91cC1zbScpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zaXplID09PSAnbGcnKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWxlbS5uYXRpdmVFbGVtZW50LCAnaW5wdXQtZ3JvdXAtbGcnKTtcbiAgICB9XG4gICAgdGhpcy5pc0hpZGRlbiA9IHRoaXMuaW5wdXQudHlwZSA9PT0gJ3Bhc3N3b3JkJztcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuaW5wdXQsICdmb3JtLWNvbnRyb2wnKTsgLy8ganVzdCB0byBiZSBzdXJlXG4gICAgdGhpcy5zZXJ2aWNlLnNldFNob3codGhpcy5pZCwgdGhpcy5pbnB1dC50eXBlICE9PSAncGFzc3dvcmQnKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMuc2VydmljZS5nZXRPYnNlcnZhYmxlKHRoaXMuaWQpLnN1YnNjcmliZShzaG93ID0+IHtcbiAgICAgIHRoaXMuaXNIaWRkZW4gPSAhc2hvdztcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuaW5wdXQsICd0eXBlJywgc2hvdyA/ICd0ZXh0JyA6ICdwYXNzd29yZCcpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19