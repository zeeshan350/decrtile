/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2 } from '@angular/core';
import { ShowHideService } from './show-hide.service';
export class ShowHideInputDirective {
    /**
     * @param {?} service
     * @param {?} el
     * @param {?} renderer
     */
    constructor(service, el, renderer) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.id = this.el.nativeElement.getAttribute('id');
        if (!this.id) {
            throw new Error(`No input id found. Please read the docs!`);
        }
        this.service.setShow(this.id, this.el.nativeElement.type !== 'password');
    }
    /**
     * @return {?}
     */
    getShown() {
        return this.service.getShow(this.id);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscription = this.service
            .getObservable(this.id)
            .subscribe(show => this.renderer.setAttribute(this.el.nativeElement, 'type', show ? 'text' : 'password'));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHideInputDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[showHideInput]'
            },] }
];
/** @nocollapse */
ShowHideInputDirective.ctorParameters = () => [
    { type: ShowHideService },
    { type: ElementRef },
    { type: Renderer2 }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.id;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLWlucHV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zaG93LWhpZGUtcGFzc3dvcmQvIiwic291cmNlcyI6WyJsaWIvc2hvdy1oaWRlLWlucHV0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUNwRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFNdEQsTUFBTSxPQUFPLHNCQUFzQjs7Ozs7O0lBSWpDLFlBQW9CLE9BQXdCLEVBQVUsRUFBYyxFQUFVLFFBQW1CO1FBQTdFLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDL0YsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDWixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7U0FDN0Q7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQztJQUMzRSxDQUFDOzs7O0lBRU0sUUFBUTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTzthQUM3QixhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQzthQUN0QixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDOUcsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7OztZQTdCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjthQUNqQzs7OztZQUxRLGVBQWU7WUFESixVQUFVO1lBQUUsU0FBUzs7Ozs7OztJQVF2Qyw4Q0FBbUM7Ozs7O0lBQ25DLG9DQUFtQjs7Ozs7SUFFUCx5Q0FBZ0M7Ozs7O0lBQUUsb0NBQXNCOzs7OztJQUFFLDBDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2hvd0hpZGVTZXJ2aWNlIH0gZnJvbSAnLi9zaG93LWhpZGUuc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnaW5wdXRbc2hvd0hpZGVJbnB1dF0nXG59KVxuZXhwb3J0IGNsYXNzIFNob3dIaWRlSW5wdXREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgaWQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNlcnZpY2U6IFNob3dIaWRlU2VydmljZSwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgdGhpcy5pZCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgaWYgKCF0aGlzLmlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGlucHV0IGlkIGZvdW5kLiBQbGVhc2UgcmVhZCB0aGUgZG9jcyFgKTtcbiAgICB9XG4gICAgdGhpcy5zZXJ2aWNlLnNldFNob3codGhpcy5pZCwgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnR5cGUgIT09ICdwYXNzd29yZCcpO1xuICB9XG5cbiAgcHVibGljIGdldFNob3duKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnNlcnZpY2UuZ2V0U2hvdyh0aGlzLmlkKTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5zZXJ2aWNlXG4gICAgICAuZ2V0T2JzZXJ2YWJsZSh0aGlzLmlkKVxuICAgICAgLnN1YnNjcmliZShzaG93ID0+IHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3R5cGUnLCBzaG93ID8gJ3RleHQnIDogJ3Bhc3N3b3JkJykpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19