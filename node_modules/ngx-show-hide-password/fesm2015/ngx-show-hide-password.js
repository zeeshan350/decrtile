import { ReplaySubject } from 'rxjs';
import { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';
import { Injectable, Directive, ElementRef, Renderer2, Input, HostListener, Component, ChangeDetectionStrategy, NgModule, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShowHideService {
    constructor() {
        this.states = [];
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    getIO(id) {
        /** @type {?} */
        let io = this.states.find(o => o.id === id);
        if (!io && id) {
            io = this.init(id);
        }
        return io;
    }
    /**
     * @private
     * @param {?} id
     * @param {?=} show
     * @return {?}
     */
    init(id, show = false) {
        /** @type {?} */
        const subject = new ReplaySubject(1);
        /** @type {?} */
        const io = {
            id,
            show,
            subject
        };
        this.states.push(io);
        return io;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getObservable(id) {
        return this.getIO(id).subject;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getShow(id) {
        return this.getIO(id).show;
    }
    /**
     * @param {?} id
     * @param {?} show
     * @return {?}
     */
    setShow(id, show) {
        /** @type {?} */
        const io = this.getIO(id);
        io.show = show;
        io.subject.next(io.show);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    toggle(id) {
        /** @type {?} */
        const io = this.getIO(id);
        io.show = !io.show;
        io.subject.next(io.show);
    }
}
ShowHideService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ShowHideService.ctorParameters = () => [];
/** @nocollapse */ ShowHideService.ngInjectableDef = defineInjectable({ factory: function ShowHideService_Factory() { return new ShowHideService(); }, token: ShowHideService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShowHideTriggerDirective {
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
    }
    /**
     * @return {?}
     */
    onClick() {
        if (!this.showHideTrigger) {
            throw new Error(`No input id found. Please read the docs!`);
        }
        this.service.toggle(this.showHideTrigger);
    }
}
ShowHideTriggerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[showHideTrigger]'
            },] }
];
/** @nocollapse */
ShowHideTriggerDirective.ctorParameters = () => [
    { type: ShowHideService }
];
ShowHideTriggerDirective.propDecorators = {
    showHideTrigger: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShowHideStatusDirective {
    /**
     * @param {?} service
     * @param {?} el
     * @param {?} renderer
     */
    constructor(service, el, renderer) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const defaultConfig = {
            show: 'visibility',
            hide: 'visibility_off',
            materialIcon: false
        };
        this.config = Object.assign({}, defaultConfig, this.showHideStatus);
        if (!this.config.id) {
            throw new Error(`No input id found. Please read the docs!`);
        }
        this.subscription = this.service.getObservable(this.config.id).subscribe(show => this.updateStatus(show));
    }
    /**
     * @private
     * @param {?} show
     * @return {?}
     */
    updateStatus(show) {
        if (this.config.materialIcon) {
            this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
        }
        else {
            this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);
            this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHideStatusDirective.decorators = [
    { type: Directive, args: [{
                selector: '[showHideStatus]'
            },] }
];
/** @nocollapse */
ShowHideStatusDirective.ctorParameters = () => [
    { type: ShowHideService },
    { type: ElementRef },
    { type: Renderer2 }
];
ShowHideStatusDirective.propDecorators = {
    showHideStatus: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShowHideInputDirective {
    /**
     * @param {?} service
     * @param {?} el
     * @param {?} renderer
     */
    constructor(service, el, renderer) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.id = this.el.nativeElement.getAttribute('id');
        if (!this.id) {
            throw new Error(`No input id found. Please read the docs!`);
        }
        this.service.setShow(this.id, this.el.nativeElement.type !== 'password');
    }
    /**
     * @return {?}
     */
    getShown() {
        return this.service.getShow(this.id);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscription = this.service
            .getObservable(this.id)
            .subscribe(show => this.renderer.setAttribute(this.el.nativeElement, 'type', show ? 'text' : 'password'));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHideInputDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[showHideInput]'
            },] }
];
/** @nocollapse */
ShowHideInputDirective.ctorParameters = () => [
    { type: ShowHideService },
    { type: ElementRef },
    { type: Renderer2 }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Add a split input button to password or text input. Toggles input type between "text" and "password".
 *
 * \@example
 * <show-hide-password size="sm|lg">
 * <input type="password" name=... />
 * </show-hide-password>
 */
class ShowHidePasswordComponent {
    /**
     * @param {?} service
     * @param {?} elem
     * @param {?} renderer
     */
    constructor(service, elem, renderer) {
        this.service = service;
        this.elem = elem;
        this.renderer = renderer;
        this.btnStyle = 'secondary';
        this.btnOutline = true;
        this.faEye = faEye;
        this.faEyeSlash = faEyeSlash;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.input = this.elem.nativeElement.querySelector('input');
        if (!this.input) {
            throw new Error(`No input element found. Please read the docs!`);
        }
        this.id = this.input.getAttribute('id');
        if (!this.id) {
            this.id = 'showHideInput' + Math.round(Math.random() * 100000);
            this.renderer.setAttribute(this.input, 'id', this.id);
        }
        this.renderer.addClass(this.elem.nativeElement, 'input-group');
        if (this.size === 'sm') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-sm');
        }
        else if (this.size === 'lg') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-lg');
        }
        this.isHidden = this.input.type === 'password';
        this.renderer.addClass(this.input, 'form-control'); // just to be sure
        this.service.setShow(this.id, this.input.type !== 'password');
        this.subscription = this.service.getObservable(this.id).subscribe(show => {
            this.isHidden = !show;
            this.renderer.setAttribute(this.input, 'type', show ? 'text' : 'password');
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHidePasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'show-hide-password',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
  <ng-content></ng-content>
  <div class="input-group-append ngx-show-hide-password">
    <button class="btn" [ngClass]="(btnOutline ? 'btn-outline-' + btnStyle : 'btn-' + btnStyle)"
      type="button" [showHideTrigger]="id">
      <fa-icon [fixedWidth]="true" size="lg" [icon]="(isHidden ? faEye : faEyeSlash)"
        [showHideStatus]="{id: id}"></fa-icon>
    </button>
  </div>
`
            }] }
];
/** @nocollapse */
ShowHidePasswordComponent.ctorParameters = () => [
    { type: ShowHideService },
    { type: ElementRef },
    { type: Renderer2 }
];
ShowHidePasswordComponent.propDecorators = {
    btnStyle: [{ type: Input }],
    btnOutline: [{ type: Input }],
    size: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShowHidePasswordModule {
}
ShowHidePasswordModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, FontAwesomeModule],
                exports: [ShowHidePasswordComponent, ShowHideTriggerDirective, ShowHideInputDirective, ShowHideStatusDirective],
                declarations: [ShowHidePasswordComponent, ShowHideTriggerDirective, ShowHideInputDirective, ShowHideStatusDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ShowHideService, ShowHideTriggerDirective, ShowHideStatusDirective, ShowHideInputDirective, ShowHidePasswordComponent, ShowHidePasswordModule };

//# sourceMappingURL=ngx-show-hide-password.js.map